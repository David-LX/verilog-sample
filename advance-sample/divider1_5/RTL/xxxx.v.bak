/****************************************Copyright (c)**************************************************
**                                      Dongdong   Studio 
**                                     
**---------------------------------------File Info-----------------------------------------------------
** File name:           xxxx
** Last modified Date:  2009-10-18
** Last Version:        1.0
** Descriptions:        xxxx
**------------------------------------------------------------------------------------------------------
** Created by:          dongdong
** Created date:        2009-10-18
** Version:             1.0
** Descriptions:        The original version
**
**------------------------------------------------------------------------------------------------------
** Modified by:			
** Modified date:		
** Version:				
** Descriptions:		
**
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/
module xxxx ( 
              //input 
              sys_clk        ,
              sys_rst_n      ,
              data_in        ,

              //output 
              data_out
              );

//input ports

input                    sys_clk             ;    //system clock;
input                    sys_rst_n           ;    //system reset, low is active;
input  [WIDTH-1:0]       data_in             ;    //input data 

//output ports
output [WIDTH-1:0]       data_out            ;

//reg define 
reg    [WIDTH-1:0]       counter             ;


//wire define 

//parameter define 
parameter WIDTH = 8;
parameter SIZE  = 8;

/*******************************************************************************************************
**                              Main Program    
**  
********************************************************************************************************/

always @(posedge sys_clk or negedge sys_rst_n) begin 
        if (sys_rst_n ==1'b0) begin 
            counter <= 8'b0;
        end
        else  
            counter  <= counter + 1'b1;
end




endmodule
//end of RTL code                       