// Copyright (C) 1991-2011 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "06/20/2012 10:36:44"
                                                                                
// Verilog Test Bench template for design : SegLed
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module SegLed_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg osc_clk;
reg sys_rst;
// wires                                               
wire seg_c1;
wire seg_c2;
wire seg_c3;
wire seg_c4;
wire seg_mosi;
wire seg_ncs;
wire seg_sck;

// assign statements (if any)                          
SegLed i1 (
// port map - connection between master ports and signals/registers   
	.osc_clk(osc_clk),
	.seg_c1(seg_c1),
	.seg_c2(seg_c2),
	.seg_c3(seg_c3),
	.seg_c4(seg_c4),
	.seg_mosi(seg_mosi),
	.seg_ncs(seg_ncs),
	.seg_sck(seg_sck),
	.sys_rst(sys_rst)
);
initial
 begin
		// Initialize Inputs
		osc_clk = 0;
		sys_rst = 0;

		// Wait 100 ns for global reset to finish
		#100;
        
		// Add stimulus here
		sys_rst = 1;
		  forever begin
            #5;
        osc_clk = !osc_clk;
		end
	end                                                
endmodule

